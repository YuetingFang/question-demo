{"ast":null,"code":"import _objectSpread from\"/fs/fast/u2024000982/project/Question_annotation/src/annotation/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useParams,useNavigate}from'react-router-dom';import{Alert,Spinner}from'react-bootstrap';import DesktopLayout from'../components/DesktopLayout';/**\n * 桌面端 ExamplesPage 页面组件\n * 显示数据库表、任务描述和用户输入表单\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ExamplesPage(){// 状态管理\nconst[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[displayTables,setDisplayTables]=useState([]);const[availableTables,setAvailableTables]=useState([]);const[tableData,setTableData]=useState({});const[currentTask,setCurrentTask]=useState(null);const[userQueries,setUserQueries]=useState(['']);const[taskCompleted,setTaskCompleted]=useState(false);const[submitting,setSubmitting]=useState(false);const[totalTasks,setTotalTasks]=useState(1);const[allTableNames,setAllTableNames]=useState([]);const[currentDbId,setCurrentDbId]=useState('');const[taskData,setTaskData]=useState([]);const[currentDbOverview,setCurrentDbOverview]=useState('');// 为用户生成唯一ID\nconst[userId]=useState(()=>{// 检查localStorage中是否已有userId\nconst storedId=localStorage.getItem('annotationUserId');if(storedId)return storedId;// 如果没有，创建一个新的UUID\nconst newId=\"user_\".concat(Math.random().toString(36).substr(2,9),\"_\").concat(Date.now());localStorage.setItem('annotationUserId',newId);return newId;});const navigate=useNavigate();const{index}=useParams();// 当前任务索引\nconst currentIndex=index!==undefined?parseInt(index,10):0;// 从API加载动态数据和任务数据\nuseEffect(()=>{// 重置用户输入和任务完成状态\nsetUserQueries(['']);setTaskCompleted(false);const loadDynamicData=async()=>{setLoading(true);try{console.log('Fetching task and table data...');// 1. 加载任务描述数据\nconst taskRes=await fetch('/api/task-descriptions');if(!taskRes.ok)throw new Error('Failed to fetch task descriptions');const tasks=await taskRes.json();console.log('Loaded task descriptions:',tasks.length);setTaskData(tasks);setTotalTasks(tasks.length);const currentTask=tasks[currentIndex];if(!currentTask)throw new Error('Current task not found');const dbId=currentTask.db_id;setCurrentDbId(dbId);setCurrentTask({db_id:dbId,task_id:currentIndex,question_id:currentTask.question_id.toString(),task_description:currentTask.task_description});// 2. 加载动态表格数据\nconst tablesRes=await fetch(\"/api/dynamic-tables?db_id=\".concat(dbId));if(!tablesRes.ok)throw new Error(\"Failed to fetch dynamic tables: \".concat(tablesRes.status));const dynamicData=await tablesRes.json();console.log('Loaded dynamic table data');// 3. 处理表格数据结构\nconst{table_names=[],tables_to_display=[],column_names={},column_descriptions={},table_data={}}=dynamicData;const formattedTables={};tables_to_display.forEach(tableName=>{formattedTables[tableName]={columns:column_names[tableName]||[],columnDescriptions:column_descriptions[tableName]||[],data:table_data[tableName]||[]};});setAllTableNames(table_names);setDisplayTables(tables_to_display);setAvailableTables(table_names.filter(name=>!tables_to_display.includes(name)));setTableData(formattedTables);// 4. 设置任务数据（优先来自动态数据中的task）\nsetCurrentTask(prev=>{var _dynamicData$task,_dynamicData$task2;return _objectSpread(_objectSpread(_objectSpread({},prev),dynamicData.task),{},{task_id:((_dynamicData$task=dynamicData.task)===null||_dynamicData$task===void 0?void 0:_dynamicData$task.task_id)||prev.task_id,task_description:((_dynamicData$task2=dynamicData.task)===null||_dynamicData$task2===void 0?void 0:_dynamicData$task2.task_description)||prev.task_description});});// 5. 设置数据库概览\nif(dynamicData.db_overview){setCurrentDbOverview(dynamicData.db_overview);}}catch(err){console.error('Error loading dynamic data:',err);setError(\"\\u52A0\\u8F7D\\u5931\\u8D25: \".concat(err.message));}finally{setLoading(false);}};loadDynamicData();},[currentIndex]);// 处理查询输入变更\nconst handleQueryChange=(index,value)=>{const updatedQueries=[...userQueries];updatedQueries[index]=value;setUserQueries(updatedQueries);};// 添加新的查询输入框\nconst addQueryInput=()=>{setUserQueries([...userQueries,'']);};// 处理表格切换\nconst handleTableSwitch=async(selectedTable,indexToReplace)=>{if(!selectedTable||selectedTable===displayTables[indexToReplace]){return;// 相同表格，不做切换\n}// 检查我们是否有所选表格的数据\nif(!tableData[selectedTable]||!tableData[selectedTable].columns||!tableData[selectedTable].data){console.log(\"Data for \".concat(selectedTable,\" not found in tableData, fetching it...\"));try{// 临时显示加载状态\nconst tempTableData=_objectSpread({},tableData);tempTableData[selectedTable]={columns:[],columnDescriptions:[],data:[],isLoading:true};setTableData(tempTableData);// 尝试从API获取该表格的数据 - 使用当前任务的db_id\nconst response=await fetch(\"/api/table-data?tableName=\".concat(selectedTable,\"&db_id=\").concat(currentDbId));if(response.ok){const tableInfo=await response.json();// 更新表格数据\nconst updatedTableData=_objectSpread({},tableData);updatedTableData[selectedTable]={columns:tableInfo.columns||[],columnDescriptions:tableInfo.columnDescriptions||[],data:tableInfo.data||[],isLoading:false};setTableData(updatedTableData);}else{console.error(\"Failed to fetch data for table \".concat(selectedTable,\":\"),response.status);// 将错误状态标记在表格数据中\nconst updatedTableData=_objectSpread({},tableData);updatedTableData[selectedTable]={columns:[],columnDescriptions:[],data:[],error:true,isLoading:false};setTableData(updatedTableData);}}catch(error){console.error(\"Error fetching table data for \".concat(selectedTable,\":\"),error);// 将错误状态标记在表格数据中\nconst updatedTableData=_objectSpread({},tableData);updatedTableData[selectedTable]={columns:[],columnDescriptions:[],data:[],error:true,isLoading:false};setTableData(updatedTableData);}}// 复制当前显示的表格列表\nconst updatedDisplayTables=[...displayTables];// 替换选中的索引位置的表格\nconst oldTable=updatedDisplayTables[indexToReplace];updatedDisplayTables[indexToReplace]=selectedTable;// 更新显示的表格\nsetDisplayTables(updatedDisplayTables);// 更新可用的表格\nconst updatedAvailableTables=[...availableTables];const selectedTableIndex=updatedAvailableTables.indexOf(selectedTable);if(selectedTableIndex!==-1){// 如果选择的表格在可用列表中，则从可用列表中移除\nupdatedAvailableTables.splice(selectedTableIndex,1);// 将被替换的表格添加到可用列表\nupdatedAvailableTables.push(oldTable);setAvailableTables(updatedAvailableTables);}};// 提交当前任务\nconst submitCurrentTask=async()=>{if(userQueries.some(q=>!q.trim()))return false;setSubmitting(true);try{// 提取当前任务数据\nconst currentTaskData=taskData[currentIndex];// 准备要提交的数据\nconst submissionData={user_id:userId,inputs:userQueries,question_id:currentTaskData.question_id,db_id:currentDbId,task_description:currentTaskData.task_description};// 发送到API保存到CSV\nconst response=await fetch('/api/save-annotation',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(submissionData)});const responseData=await response.json();if(!response.ok){throw new Error(responseData.error||'Failed to save annotation');}console.log('Annotation saved successfully:',responseData);setTaskCompleted(true);return true;// 成功提交\n}catch(err){console.error('Error saving annotation:',err);alert(\"Failed to save: \".concat(err.message));return false;// 提交失败\n}finally{setSubmitting(false);}};// 处理Next按钮点击事件\nconst handleNextClick=async()=>{const success=await submitCurrentTask();if(success){if(currentIndex<totalTasks-1){// 如果还有更多例子，跳转到下一个\nnavigate(\"/examples/\".concat(currentIndex+1));}else{// 如果这是最后一个例子，跳转到感谢页面\nnavigate('/thankyou');}}};// 渲染表格选择器\nconst renderTableSelector=tableIndex=>{const currentTable=displayTables[tableIndex];// 如果没有其他表格可选，则显示当前表格名称\nif(availableTables.length===0||allTableNames.length<=3){return/*#__PURE__*/_jsx(\"div\",{className:\"desktop-table-header\",children:/*#__PURE__*/_jsx(\"span\",{className:\"table-name-display\",children:currentTable})});}// 否则显示下拉选择器\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"desktop-table-header\",children:/*#__PURE__*/_jsxs(\"select\",{className:\"desktop-table-select\",value:currentTable,onChange:e=>handleTableSwitch(e.target.value,tableIndex),children:[/*#__PURE__*/_jsx(\"option\",{value:currentTable,children:currentTable}),availableTables.map(tableName=>/*#__PURE__*/_jsx(\"option\",{value:tableName,children:tableName},tableName))]})});};// 渲染单个表格\nconst renderSingleTable=(tableName,tableIndex)=>{console.log('Rendering table:',tableName,'with data:',tableData[tableName]);const data=tableData[tableName];// 如果没有数据，显示错误提示\nif(!data){console.error('No data for table:',tableName);return/*#__PURE__*/_jsxs(Alert,{variant:\"warning\",children:[\"Unable to load table data for \",tableName]});}const tableStyle={fontSize:'0.8rem'};// 如果表格数据正在加载中\nif(data.isLoading){return/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-table-panel\",children:[renderTableSelector(tableIndex),/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-tables-container text-center py-4\",children:[/*#__PURE__*/_jsx(Spinner,{animation:\"border\",role:\"status\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"visually-hidden\",children:[\"Loading table \",tableName,\"...\"]})}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2\",children:\"Loading table data...\"})]})]});}// 如果加载表格数据时发生错误\nif(data.error){return/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-table-panel\",children:[renderTableSelector(tableIndex),/*#__PURE__*/_jsx(\"div\",{className:\"desktop-tables-container\",children:/*#__PURE__*/_jsxs(Alert,{variant:\"danger\",children:[\"Failed to load data for table: \",tableName,\". Please try selecting a different table.\"]})})]});}// 确保数据结构正确\nconst columns=data.columns||[];const columnDescriptions=data.columnDescriptions||[];const tableRows=data.data||[];console.log('Table structure:',{columns:columns.length,columnDescriptions:columnDescriptions.length,rows:tableRows.length});return/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-table-panel\",children:[renderTableSelector(tableIndex),/*#__PURE__*/_jsx(\"div\",{className:\"desktop-tables-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"table-scroll-container\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"desktop-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:columns.map((col,idx)=>{let displayText=col;if(columnDescriptions&&columnDescriptions[idx]){const columnInfo=columnDescriptions[idx];if(columnInfo.description&&columnInfo.description.trim()!==''){displayText=columnInfo.description;}else if(columnInfo.name&&columnInfo.name.trim()!==''){displayText=columnInfo.name;}}return/*#__PURE__*/_jsx(\"th\",{title:col,children:displayText},idx);})})}),/*#__PURE__*/_jsx(\"tbody\",{children:tableRows&&tableRows.length>0?tableRows.map((row,rowIdx)=>{// 处理不同类型的行数据格式\nif(Array.isArray(row)){// 如果行是数组格式\nreturn/*#__PURE__*/_jsx(\"tr\",{children:row.map((cell,cellIdx)=>{const displayValue=cell===null||cell===undefined?'':String(cell);return/*#__PURE__*/_jsx(\"td\",{children:displayValue},cellIdx);})},rowIdx);}else if(typeof row==='object'&&row!==null){// 如果行是对象格式 (API 可能返回对象而不是数组)\nreturn/*#__PURE__*/_jsx(\"tr\",{children:columns.map((colName,colIdx)=>{const cell=row[colName];const displayValue=cell===null||cell===undefined?'':String(cell);return/*#__PURE__*/_jsx(\"td\",{children:displayValue},colIdx);})},rowIdx);}else{// 未知格式\nreturn/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{children:\"Invalid row format\"})},rowIdx);}}):/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:columns.length||1,children:\"No data available\"})})})]})})})]});};// 渲染所有表格 - 垂直排列\nconst renderTables=()=>{return displayTables.map((tableName,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"vertical-table-container\",children:renderSingleTable(tableName,index)},tableName));};// 渲染任务描述\nconst renderTaskDescription=()=>{if(!currentTask){return/*#__PURE__*/_jsx(Alert,{variant:\"info\",children:\"No task information available\"});}// 提取当前任务索引的数据\nconst currentTaskData=taskData[currentIndex];if(!currentTaskData){return/*#__PURE__*/_jsx(Alert,{variant:\"warning\",children:\"Task data not found\"});}// 处理可能包含换行符的文本\nconst formatTaskDescription=text=>{if(!text)return null;return text.split('\\n').map((line,i)=>/*#__PURE__*/_jsx(\"div\",{style:{paddingLeft:'2em'},children:line},i));};return/*#__PURE__*/_jsxs(\"div\",{className:\"task-description\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-between align-items-center mb-2\",children:/*#__PURE__*/_jsxs(\"h4\",{className:\"mb-0\",children:[\" \",/*#__PURE__*/_jsx(\"strong\",{children:\"Task Description\"}),\" \",/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'1rem'},children:\"includes both the intended goal and all necessary conditions.\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-task-description\",children:[/*#__PURE__*/_jsx(\"br\",{}),formatTaskDescription(currentTaskData.task_description)]})]});};// 渲染用户输入区域\nconst renderUserInput=()=>{// Define different orderings based on the current page index\nconst orderings=[\"statements/commands/questions/queries\",// for index 0\n\"queries/statements/commands/questions\",// for index 1\n\"questions/queries/statements/commands\",// for index 2\n\"commands/questions/queries/statements\"// for index 3\n];// Get the ordering based on the currentIndex, using modulo to handle more pages than orderings\nconst currentOrdering=orderings[currentIndex%orderings.length];return/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-input-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-between align-items-center mb-1\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\" Type one or more natural language \",currentOrdering,\" to retrieve the expected information from the left database based on the task description. \"]})}),userQueries.map((query,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"desktop-input-row\",children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',width:'100%'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:query,onChange:e=>handleQueryChange(index,e.target.value),className:\"desktop-input-field\",disabled:submitting||taskCompleted,placeholder:\"Enter text here...\",style:{flex:1}}),!taskCompleted&&index===userQueries.length-1&&/*#__PURE__*/_jsx(\"div\",{style:{marginLeft:'15px'},children:/*#__PURE__*/_jsxs(\"button\",{className:\"desktop-button desktop-button-secondary \".concat(!query.trim()?'disabled':''),onClick:addQueryInput,disabled:!query.trim(),children:[/*#__PURE__*/_jsx(\"strong\",{children:\" + \"}),\" Add More\"]})})]})},index))]});};// 加载中显示\nif(loading){return/*#__PURE__*/_jsx(DesktopLayout,{title:\"Loading Task...\",children:/*#__PURE__*/_jsx(\"div\",{className:\"d-flex justify-content-center align-items-center\",style:{height:'60vh'},children:/*#__PURE__*/_jsx(Spinner,{animation:\"border\",role:\"status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})})})});}// 错误显示\nif(error){console.log('Rendering error state:',error);return/*#__PURE__*/_jsx(DesktopLayout,{title:\"Error\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-panel\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"panel-header\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"panel-title text-danger\",children:\"Error Loading Data\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"panel-body\",children:[/*#__PURE__*/_jsx(\"p\",{children:error}),/*#__PURE__*/_jsx(\"p\",{children:\"Using sample data to continue. The real data couldn't be loaded from the API.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"panel-footer\",children:/*#__PURE__*/_jsx(\"button\",{className:\"desktop-button desktop-button-primary\",onClick:()=>window.location.reload(),children:\"Retry\"})})]})});}// 主要内容显示\n// 确保只渲染有数据的表格\n// No longer needed: const tableNames = Object.keys(tableData || {}).filter(name => tableData[name]);\nreturn/*#__PURE__*/_jsx(DesktopLayout,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-panel\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"panel-header\",children:/*#__PURE__*/_jsxs(\"h1\",{className:\"panel-title\",children:[\"Task \",currentIndex+1,\" / \",totalTasks,\" \"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"panel-body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"database-header mb-3\",children:[/*#__PURE__*/_jsxs(\"h4\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\" Database:\"}),\" \",/*#__PURE__*/_jsx(\"span\",{className:\"database-name\",children:currentDbId})]}),/*#__PURE__*/_jsx(\"p\",{children:currentDbOverview}),/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"desktop-layout-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tables-column\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"section-title\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"Table Content\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"vertical-tables-container\",children:renderTables()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"task-column\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"task-description-container\",children:renderTaskDescription()}),/*#__PURE__*/_jsx(\"div\",{className:\"user-input-container\",children:renderUserInput()}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"button\",{className:\"desktop-button desktop-button-primary \".concat(submitting||userQueries.some(q=>!q.trim())?'disabled':''),onClick:handleNextClick,disabled:submitting||userQueries.some(q=>!q.trim()),children:submitting?'Submitting...':'Next'})})]})]})]})]})});}export default ExamplesPage;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Alert","Spinner","DesktopLayout","jsx","_jsx","jsxs","_jsxs","ExamplesPage","loading","setLoading","error","setError","displayTables","setDisplayTables","availableTables","setAvailableTables","tableData","setTableData","currentTask","setCurrentTask","userQueries","setUserQueries","taskCompleted","setTaskCompleted","submitting","setSubmitting","totalTasks","setTotalTasks","allTableNames","setAllTableNames","currentDbId","setCurrentDbId","taskData","setTaskData","currentDbOverview","setCurrentDbOverview","userId","storedId","localStorage","getItem","newId","concat","Math","random","toString","substr","Date","now","setItem","navigate","index","currentIndex","undefined","parseInt","loadDynamicData","console","log","taskRes","fetch","ok","Error","tasks","json","length","dbId","db_id","task_id","question_id","task_description","tablesRes","status","dynamicData","table_names","tables_to_display","column_names","column_descriptions","table_data","formattedTables","forEach","tableName","columns","columnDescriptions","data","filter","name","includes","prev","_dynamicData$task","_dynamicData$task2","_objectSpread","task","db_overview","err","message","handleQueryChange","value","updatedQueries","addQueryInput","handleTableSwitch","selectedTable","indexToReplace","tempTableData","isLoading","response","tableInfo","updatedTableData","updatedDisplayTables","oldTable","updatedAvailableTables","selectedTableIndex","indexOf","splice","push","submitCurrentTask","some","q","trim","currentTaskData","submissionData","user_id","inputs","method","headers","body","JSON","stringify","responseData","alert","handleNextClick","success","renderTableSelector","tableIndex","currentTable","className","children","onChange","e","target","map","renderSingleTable","variant","tableStyle","fontSize","animation","role","tableRows","rows","col","idx","displayText","columnInfo","description","title","row","rowIdx","Array","isArray","cell","cellIdx","displayValue","String","colName","colIdx","colSpan","renderTables","renderTaskDescription","formatTaskDescription","text","split","line","i","style","paddingLeft","renderUserInput","orderings","currentOrdering","query","display","alignItems","width","type","disabled","placeholder","flex","marginLeft","onClick","height","window","location","reload","justifyContent"],"sources":["/fs/fast/u2024000982/project/Question_annotation/src/annotation/frontend/src/pages/ExamplesPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Alert, Spinner } from 'react-bootstrap';\nimport DesktopLayout from '../components/DesktopLayout';\n\n/**\n * 桌面端 ExamplesPage 页面组件\n * 显示数据库表、任务描述和用户输入表单\n */\nfunction ExamplesPage() {\n  // 状态管理\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [displayTables, setDisplayTables] = useState([]);\n  const [availableTables, setAvailableTables] = useState([]);\n  const [tableData, setTableData] = useState({});\n  const [currentTask, setCurrentTask] = useState(null);\n  const [userQueries, setUserQueries] = useState(['']);\n  const [taskCompleted, setTaskCompleted] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [totalTasks, setTotalTasks] = useState(1);\n  const [allTableNames, setAllTableNames] = useState([]);\n  const [currentDbId, setCurrentDbId] = useState('');\n  const [taskData, setTaskData] = useState([]);\n  const [currentDbOverview, setCurrentDbOverview] = useState('');\n  // 为用户生成唯一ID\n  const [userId] = useState(() => {\n    // 检查localStorage中是否已有userId\n    const storedId = localStorage.getItem('annotationUserId');\n    if (storedId) return storedId;\n    \n    // 如果没有，创建一个新的UUID\n    const newId = `user_${Math.random().toString(36).substr(2, 9)}_${Date.now()}`;\n    localStorage.setItem('annotationUserId', newId);\n    return newId;\n  });\n  \n  const navigate = useNavigate();\n  const { index } = useParams();\n  \n  // 当前任务索引\n  const currentIndex = index !== undefined ? parseInt(index, 10) : 0;\n  \n  // 从API加载动态数据和任务数据\n  useEffect(() => {\n    // 重置用户输入和任务完成状态\n    setUserQueries(['']);\n    setTaskCompleted(false);\n    \n    const loadDynamicData = async () => {\n      setLoading(true);\n      try {\n        console.log('Fetching task and table data...');\n  \n        // 1. 加载任务描述数据\n        const taskRes = await fetch('/api/task-descriptions');\n        if (!taskRes.ok) throw new Error('Failed to fetch task descriptions');\n        const tasks = await taskRes.json();\n        console.log('Loaded task descriptions:', tasks.length);\n  \n        setTaskData(tasks);\n        setTotalTasks(tasks.length);\n  \n        const currentTask = tasks[currentIndex];\n        if (!currentTask) throw new Error('Current task not found');\n        \n        const dbId = currentTask.db_id;\n        setCurrentDbId(dbId);\n        setCurrentTask({\n          db_id: dbId,\n          task_id: currentIndex,\n          question_id: currentTask.question_id.toString(),\n          task_description: currentTask.task_description,\n        });\n  \n        // 2. 加载动态表格数据\n        const tablesRes = await fetch(`/api/dynamic-tables?db_id=${dbId}`);\n        if (!tablesRes.ok) throw new Error(`Failed to fetch dynamic tables: ${tablesRes.status}`);\n        const dynamicData = await tablesRes.json();\n        console.log('Loaded dynamic table data');\n  \n        // 3. 处理表格数据结构\n        const { table_names = [], tables_to_display = [], column_names = {}, column_descriptions = {}, table_data = {} } = dynamicData;\n        const formattedTables = {};\n        tables_to_display.forEach(tableName => {\n          formattedTables[tableName] = {\n            columns: column_names[tableName] || [],\n            columnDescriptions: column_descriptions[tableName] || [],\n            data: table_data[tableName] || []\n          };\n        });\n  \n        setAllTableNames(table_names);\n        setDisplayTables(tables_to_display);\n        setAvailableTables(table_names.filter(name => !tables_to_display.includes(name)));\n        setTableData(formattedTables);\n  \n        // 4. 设置任务数据（优先来自动态数据中的task）\n        setCurrentTask(prev => ({\n          ...prev,\n          ...dynamicData.task,\n          task_id: dynamicData.task?.task_id || prev.task_id,\n          task_description: dynamicData.task?.task_description || prev.task_description,\n        }));\n  \n        // 5. 设置数据库概览\n        if (dynamicData.db_overview) {\n          setCurrentDbOverview(dynamicData.db_overview);\n        }\n  \n      } catch (err) {\n        console.error('Error loading dynamic data:', err);\n        setError(`加载失败: ${err.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    loadDynamicData();\n  }, [currentIndex]);\n  \n  \n  // 处理查询输入变更\n  const handleQueryChange = (index, value) => {\n    const updatedQueries = [...userQueries];\n    updatedQueries[index] = value;\n    setUserQueries(updatedQueries);\n  };\n  \n  // 添加新的查询输入框\n  const addQueryInput = () => {\n    setUserQueries([...userQueries, '']);\n  };\n  \n  // 处理表格切换\n  const handleTableSwitch = async (selectedTable, indexToReplace) => {\n    if (!selectedTable || selectedTable === displayTables[indexToReplace]) {\n      return; // 相同表格，不做切换\n    }\n    \n    // 检查我们是否有所选表格的数据\n    if (!tableData[selectedTable] || \n        !tableData[selectedTable].columns || \n        !tableData[selectedTable].data) {\n      \n      console.log(`Data for ${selectedTable} not found in tableData, fetching it...`);\n      \n      try {\n        // 临时显示加载状态\n        const tempTableData = {...tableData};\n        tempTableData[selectedTable] = { \n          columns: [], \n          columnDescriptions: [],\n          data: [], \n          isLoading: true \n        };\n        setTableData(tempTableData);\n        \n        // 尝试从API获取该表格的数据 - 使用当前任务的db_id\n        const response = await fetch(`/api/table-data?tableName=${selectedTable}&db_id=${currentDbId}`);\n        \n        if (response.ok) {\n          const tableInfo = await response.json();\n          \n          // 更新表格数据\n          const updatedTableData = {...tableData};\n          updatedTableData[selectedTable] = {\n            columns: tableInfo.columns || [],\n            columnDescriptions: tableInfo.columnDescriptions || [],\n            data: tableInfo.data || [],\n            isLoading: false\n          };\n          \n          setTableData(updatedTableData);\n        } else {\n          console.error(`Failed to fetch data for table ${selectedTable}:`, response.status);\n          \n          // 将错误状态标记在表格数据中\n          const updatedTableData = {...tableData};\n          updatedTableData[selectedTable] = { \n            columns: [], \n            columnDescriptions: [],\n            data: [], \n            error: true,\n            isLoading: false\n          };\n          setTableData(updatedTableData);\n        }\n      } catch (error) {\n        console.error(`Error fetching table data for ${selectedTable}:`, error);\n        \n        // 将错误状态标记在表格数据中\n        const updatedTableData = {...tableData};\n        updatedTableData[selectedTable] = { \n          columns: [], \n          columnDescriptions: [],\n          data: [], \n          error: true,\n          isLoading: false\n        };\n        setTableData(updatedTableData);\n      }\n    }\n    \n    // 复制当前显示的表格列表\n    const updatedDisplayTables = [...displayTables];\n    \n    // 替换选中的索引位置的表格\n    const oldTable = updatedDisplayTables[indexToReplace];\n    updatedDisplayTables[indexToReplace] = selectedTable;\n    \n    // 更新显示的表格\n    setDisplayTables(updatedDisplayTables);\n    \n    // 更新可用的表格\n    const updatedAvailableTables = [...availableTables];\n    const selectedTableIndex = updatedAvailableTables.indexOf(selectedTable);\n    \n    if (selectedTableIndex !== -1) {\n      // 如果选择的表格在可用列表中，则从可用列表中移除\n      updatedAvailableTables.splice(selectedTableIndex, 1);\n      // 将被替换的表格添加到可用列表\n      updatedAvailableTables.push(oldTable);\n      setAvailableTables(updatedAvailableTables);\n    }\n  };\n  \n  // 提交当前任务\n  const submitCurrentTask = async () => {\n    if (userQueries.some(q => !q.trim())) return false;\n    \n    setSubmitting(true);\n    \n    try {\n      // 提取当前任务数据\n      const currentTaskData = taskData[currentIndex];\n      \n      // 准备要提交的数据\n      const submissionData = {\n        user_id: userId,\n        inputs: userQueries,\n        question_id: currentTaskData.question_id,\n        db_id: currentDbId,\n        task_description: currentTaskData.task_description\n      };\n      \n      // 发送到API保存到CSV\n      const response = await fetch('/api/save-annotation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(submissionData),\n      });\n      \n      const responseData = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(responseData.error || 'Failed to save annotation');\n      }\n      \n      console.log('Annotation saved successfully:', responseData);\n      setTaskCompleted(true);\n      return true; // 成功提交\n    } catch (err) {\n      console.error('Error saving annotation:', err);\n      alert(`Failed to save: ${err.message}`);\n      return false; // 提交失败\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  // 处理Next按钮点击事件\n  const handleNextClick = async () => {\n    const success = await submitCurrentTask();\n    if (success) {\n      if (currentIndex < totalTasks - 1) {\n        // 如果还有更多例子，跳转到下一个\n        navigate(`/examples/${currentIndex + 1}`);\n      } else {\n        // 如果这是最后一个例子，跳转到感谢页面\n        navigate('/thankyou');\n      }\n    }\n  };\n  \n  // 渲染表格选择器\n  const renderTableSelector = (tableIndex) => {\n    const currentTable = displayTables[tableIndex];\n    \n    // 如果没有其他表格可选，则显示当前表格名称\n    if (availableTables.length === 0 || allTableNames.length <= 3) {\n      return (\n        <div className=\"desktop-table-header\">\n          <span className=\"table-name-display\">{currentTable}</span>\n        </div>\n      );\n    }\n    \n    // 否则显示下拉选择器\n    return (\n      <div className=\"desktop-table-header\">\n        <select\n          className=\"desktop-table-select\"\n          value={currentTable}\n          onChange={(e) => handleTableSwitch(e.target.value, tableIndex)}\n        >\n          <option value={currentTable}>{currentTable}</option>\n          {availableTables.map(tableName => (\n            <option key={tableName} value={tableName}>\n              {tableName}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  };\n  \n  // 渲染单个表格\n  const renderSingleTable = (tableName, tableIndex) => {\n    console.log('Rendering table:', tableName, 'with data:', tableData[tableName]);\n    const data = tableData[tableName];\n    \n    // 如果没有数据，显示错误提示\n    if (!data) {\n      console.error('No data for table:', tableName);\n      return <Alert variant=\"warning\">Unable to load table data for {tableName}</Alert>;\n    }\n    \n    const tableStyle = {\n      fontSize: '0.8rem'\n    };\n    \n    // 如果表格数据正在加载中\n    if (data.isLoading) {\n      return (\n        <div className=\"desktop-table-panel\">\n          {renderTableSelector(tableIndex)}\n          <div className=\"desktop-tables-container text-center py-4\">\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"visually-hidden\">Loading table {tableName}...</span>\n            </Spinner>\n            <p className=\"mt-2\">Loading table data...</p>\n          </div>\n        </div>\n      );\n    }\n    \n    // 如果加载表格数据时发生错误\n    if (data.error) {\n      return (\n        <div className=\"desktop-table-panel\">\n          {renderTableSelector(tableIndex)}\n          <div className=\"desktop-tables-container\">\n            <Alert variant=\"danger\">\n              Failed to load data for table: {tableName}. Please try selecting a different table.\n            </Alert>\n          </div>\n        </div>\n      );\n    }\n    \n    // 确保数据结构正确\n    const columns = data.columns || [];\n    const columnDescriptions = data.columnDescriptions || [];\n    const tableRows = data.data || [];\n    \n    console.log('Table structure:', {\n      columns: columns.length,\n      columnDescriptions: columnDescriptions.length,\n      rows: tableRows.length\n    });\n    \n    return (\n      <div className=\"desktop-table-panel\">\n        {renderTableSelector(tableIndex)}\n        \n        <div className=\"desktop-tables-container\">\n          <div className=\"table-scroll-container\">\n            <table className=\"desktop-table\">\n              <thead>\n                <tr>\n                  {columns.map((col, idx) => {\n                    let displayText = col;\n                    if (columnDescriptions && columnDescriptions[idx]) {\n                      const columnInfo = columnDescriptions[idx];\n                      if (columnInfo.description && columnInfo.description.trim() !== '') {\n                        displayText = columnInfo.description;\n                      } else if (columnInfo.name && columnInfo.name.trim() !== '') {\n                        displayText = columnInfo.name;\n                      }\n                    }\n                    return <th key={idx} title={col}>{displayText}</th>;\n                  })}\n                </tr>\n              </thead>\n              <tbody>\n                {tableRows && tableRows.length > 0 ? tableRows.map((row, rowIdx) => {\n                  // 处理不同类型的行数据格式\n                  if (Array.isArray(row)) {\n                    // 如果行是数组格式\n                    return (\n                      <tr key={rowIdx}>\n                        {row.map((cell, cellIdx) => {\n                          const displayValue = cell === null || cell === undefined ? '' : String(cell);\n                          return <td key={cellIdx}>{displayValue}</td>;\n                        })}\n                      </tr>\n                    );\n                  } else if (typeof row === 'object' && row !== null) {\n                    // 如果行是对象格式 (API 可能返回对象而不是数组)\n                    return (\n                      <tr key={rowIdx}>\n                        {columns.map((colName, colIdx) => {\n                          const cell = row[colName];\n                          const displayValue = cell === null || cell === undefined ? '' : String(cell);\n                          return <td key={colIdx}>{displayValue}</td>;\n                        })}\n                      </tr>\n                    );\n                  } else {\n                    // 未知格式\n                    return <tr key={rowIdx}><td>Invalid row format</td></tr>;\n                  }\n                }) : (\n                  <tr><td colSpan={columns.length || 1}>No data available</td></tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  // 渲染所有表格 - 垂直排列\n  const renderTables = () => {\n    return displayTables.map((tableName, index) => (\n      <div key={tableName} className=\"vertical-table-container\">\n        {renderSingleTable(tableName, index)}\n      </div>\n    ));\n  };\n  \n  // 渲染任务描述\n  const renderTaskDescription = () => {\n    if (!currentTask) {\n      return <Alert variant=\"info\">No task information available</Alert>;\n    }\n    \n    // 提取当前任务索引的数据\n    const currentTaskData = taskData[currentIndex];\n    \n    if (!currentTaskData) {\n      return <Alert variant=\"warning\">Task data not found</Alert>;\n    }\n    \n    // 处理可能包含换行符的文本\n    const formatTaskDescription = (text) => {\n      if (!text) return null;\n    \n      return text.split('\\n').map((line, i) => (\n        <div key={i} style={{ paddingLeft: '2em' }}>\n          {line}\n        </div>\n      ));\n    };\n    \n    return (\n      <div className=\"task-description\">\n        <div className=\"d-flex justify-content-between align-items-center mb-2\">\n          <h4 className=\"mb-0\"> <strong>Task Description</strong> <span style={{fontSize: '1rem'}}>includes both the intended goal and all necessary conditions.</span></h4> \n        </div>\n        <div className=\"desktop-task-description\">\n          <br />\n          {formatTaskDescription(currentTaskData.task_description)}\n        </div>\n      </div>\n    );    \n  };\n  \n  // 渲染用户输入区域\n  const renderUserInput = () => {\n    // Define different orderings based on the current page index\n    const orderings = [\n      \"statements/commands/questions/queries\", // for index 0\n      \"queries/statements/commands/questions\", // for index 1\n      \"questions/queries/statements/commands\", // for index 2\n      \"commands/questions/queries/statements\"  // for index 3\n    ];\n    \n    // Get the ordering based on the currentIndex, using modulo to handle more pages than orderings\n    const currentOrdering = orderings[currentIndex % orderings.length];\n    \n    return (\n      <div className=\"desktop-input-container\">\n        <div className=\"d-flex justify-content-between align-items-center mb-1\">\n          <p> Type one or more natural language {currentOrdering} to retrieve the expected information from the left database based on the task description. </p>\n        </div>\n\n        {userQueries.map((query, index) => (\n          <div key={index} className=\"desktop-input-row\">\n            <div style={{ display: 'flex', alignItems: 'center', width: '100%' }}>\n              <input \n                type=\"text\"\n                value={query}\n                onChange={(e) => handleQueryChange(index, e.target.value)}\n                className=\"desktop-input-field\"\n                disabled={submitting || taskCompleted}\n                placeholder=\"Enter text here...\"\n                style={{ flex: 1 }}\n              />\n              {!taskCompleted && index === userQueries.length - 1 && (\n                <div style={{ marginLeft: '15px' }}>\n                  <button \n                    className={`desktop-button desktop-button-secondary ${!query.trim() ? 'disabled' : ''}`}\n                    onClick={addQueryInput}\n                    disabled={!query.trim()}\n                  >\n                  <strong> + </strong> Add More\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  // 加载中显示\n  if (loading) {\n    return (\n      <DesktopLayout title=\"Loading Task...\">\n        <div className=\"d-flex justify-content-center align-items-center\" style={{height: '60vh'}}>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n          </Spinner>\n        </div>\n      </DesktopLayout>\n    );\n  }\n\n  // 错误显示\n  if (error) {\n    console.log('Rendering error state:', error);\n    return (\n      <DesktopLayout title=\"Error\">\n        <div className=\"desktop-panel\">\n          <div className=\"panel-header\">\n            <h2 className=\"panel-title text-danger\">Error Loading Data</h2>\n          </div>\n          <div className=\"panel-body\">\n            <p>{error}</p>\n            <p>Using sample data to continue. The real data couldn't be loaded from the API.</p>\n          </div>\n          <div className=\"panel-footer\">\n            <button \n              className=\"desktop-button desktop-button-primary\"\n              onClick={() => window.location.reload()}\n            >\n              Retry\n            </button>\n          </div>\n        </div>\n      </DesktopLayout>\n    );\n  }\n  \n  // 主要内容显示\n  // 确保只渲染有数据的表格\n  // No longer needed: const tableNames = Object.keys(tableData || {}).filter(name => tableData[name]);\n  return (\n    <DesktopLayout>\n      <div className=\"desktop-panel\">  \n        <div className=\"panel-header\">\n          <h1 className=\"panel-title\">Task {currentIndex + 1} / {totalTasks} </h1>\n        </div>\n        <div className=\"panel-body\">\n          <div className=\"database-header mb-3\">\n            <h4><strong> Database:</strong> <span className=\"database-name\">{currentDbId}</span></h4>\n            <p>{currentDbOverview}</p>\n            <br />\n          </div>\n          \n          <div className=\"desktop-layout-container\">\n            {/* 左侧表格区域 - 垂直排列3个表格 */}\n            <div className=\"tables-column\">\n              <h4 className=\"section-title\"><strong>Table Content</strong></h4>\n              <div className=\"vertical-tables-container\">\n                    {renderTables()}\n              </div>\n            </div>\n            \n            {/* 右侧任务描述和用户输入区域 */}\n            <div className=\"task-column\">\n              <div className=\"task-description-container\">\n                {renderTaskDescription()}\n              </div>\n              <div className=\"user-input-container\">\n                {renderUserInput()}\n              </div>\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <button \n                  className={`desktop-button desktop-button-primary ${submitting || userQueries.some(q => !q.trim()) ? 'disabled' : ''}`}\n                  onClick={handleNextClick} \n                  disabled={submitting || userQueries.some(q => !q.trim())}\n                >\n                  {submitting ? 'Submitting...' : 'Next'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DesktopLayout>\n  );\n}\n  \nexport default ExamplesPage;\n"],"mappings":"oJAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,SAAS,CAAEC,WAAW,KAAQ,kBAAkB,CACzD,OAASC,KAAK,CAAEC,OAAO,KAAQ,iBAAiB,CAChD,MAAO,CAAAC,aAAa,KAAM,6BAA6B,CAEvD;AACA;AACA;AACA,GAHA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAIA,QAAS,CAAAC,YAAYA,CAAA,CAAG,CACtB;AACA,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACc,KAAK,CAAEC,QAAQ,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACgB,aAAa,CAAEC,gBAAgB,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACkB,eAAe,CAAEC,kBAAkB,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACoB,SAAS,CAAEC,YAAY,CAAC,CAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9C,KAAM,CAACsB,WAAW,CAAEC,cAAc,CAAC,CAAGvB,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACwB,WAAW,CAAEC,cAAc,CAAC,CAAGzB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CACpD,KAAM,CAAC0B,aAAa,CAAEC,gBAAgB,CAAC,CAAG3B,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAAC4B,UAAU,CAAEC,aAAa,CAAC,CAAG7B,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAAC8B,UAAU,CAAEC,aAAa,CAAC,CAAG/B,QAAQ,CAAC,CAAC,CAAC,CAC/C,KAAM,CAACgC,aAAa,CAAEC,gBAAgB,CAAC,CAAGjC,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACkC,WAAW,CAAEC,cAAc,CAAC,CAAGnC,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACoC,QAAQ,CAAEC,WAAW,CAAC,CAAGrC,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACsC,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGvC,QAAQ,CAAC,EAAE,CAAC,CAC9D;AACA,KAAM,CAACwC,MAAM,CAAC,CAAGxC,QAAQ,CAAC,IAAM,CAC9B;AACA,KAAM,CAAAyC,QAAQ,CAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,CACzD,GAAIF,QAAQ,CAAE,MAAO,CAAAA,QAAQ,CAE7B;AACA,KAAM,CAAAG,KAAK,SAAAC,MAAA,CAAWC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,MAAAJ,MAAA,CAAIK,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE,CAC7ET,YAAY,CAACU,OAAO,CAAC,kBAAkB,CAAER,KAAK,CAAC,CAC/C,MAAO,CAAAA,KAAK,CACd,CAAC,CAAC,CAEF,KAAM,CAAAS,QAAQ,CAAGlD,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEmD,KAAM,CAAC,CAAGpD,SAAS,CAAC,CAAC,CAE7B;AACA,KAAM,CAAAqD,YAAY,CAAGD,KAAK,GAAKE,SAAS,CAAGC,QAAQ,CAACH,KAAK,CAAE,EAAE,CAAC,CAAG,CAAC,CAElE;AACArD,SAAS,CAAC,IAAM,CACd;AACAwB,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CACpBE,gBAAgB,CAAC,KAAK,CAAC,CAEvB,KAAM,CAAA+B,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC7C,UAAU,CAAC,IAAI,CAAC,CAChB,GAAI,CACF8C,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAE9C;AACA,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAAC,KAAK,CAAC,wBAAwB,CAAC,CACrD,GAAI,CAACD,OAAO,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,mCAAmC,CAAC,CACrE,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAJ,OAAO,CAACK,IAAI,CAAC,CAAC,CAClCP,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEK,KAAK,CAACE,MAAM,CAAC,CAEtD9B,WAAW,CAAC4B,KAAK,CAAC,CAClBlC,aAAa,CAACkC,KAAK,CAACE,MAAM,CAAC,CAE3B,KAAM,CAAA7C,WAAW,CAAG2C,KAAK,CAACV,YAAY,CAAC,CACvC,GAAI,CAACjC,WAAW,CAAE,KAAM,IAAI,CAAA0C,KAAK,CAAC,wBAAwB,CAAC,CAE3D,KAAM,CAAAI,IAAI,CAAG9C,WAAW,CAAC+C,KAAK,CAC9BlC,cAAc,CAACiC,IAAI,CAAC,CACpB7C,cAAc,CAAC,CACb8C,KAAK,CAAED,IAAI,CACXE,OAAO,CAAEf,YAAY,CACrBgB,WAAW,CAAEjD,WAAW,CAACiD,WAAW,CAACvB,QAAQ,CAAC,CAAC,CAC/CwB,gBAAgB,CAAElD,WAAW,CAACkD,gBAChC,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAX,KAAK,8BAAAjB,MAAA,CAA8BuB,IAAI,CAAE,CAAC,CAClE,GAAI,CAACK,SAAS,CAACV,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,oCAAAnB,MAAA,CAAoC4B,SAAS,CAACC,MAAM,CAAE,CAAC,CACzF,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAF,SAAS,CAACP,IAAI,CAAC,CAAC,CAC1CP,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAExC;AACA,KAAM,CAAEgB,WAAW,CAAG,EAAE,CAAEC,iBAAiB,CAAG,EAAE,CAAEC,YAAY,CAAG,CAAC,CAAC,CAAEC,mBAAmB,CAAG,CAAC,CAAC,CAAEC,UAAU,CAAG,CAAC,CAAE,CAAC,CAAGL,WAAW,CAC9H,KAAM,CAAAM,eAAe,CAAG,CAAC,CAAC,CAC1BJ,iBAAiB,CAACK,OAAO,CAACC,SAAS,EAAI,CACrCF,eAAe,CAACE,SAAS,CAAC,CAAG,CAC3BC,OAAO,CAAEN,YAAY,CAACK,SAAS,CAAC,EAAI,EAAE,CACtCE,kBAAkB,CAAEN,mBAAmB,CAACI,SAAS,CAAC,EAAI,EAAE,CACxDG,IAAI,CAAEN,UAAU,CAACG,SAAS,CAAC,EAAI,EACjC,CAAC,CACH,CAAC,CAAC,CAEFlD,gBAAgB,CAAC2C,WAAW,CAAC,CAC7B3D,gBAAgB,CAAC4D,iBAAiB,CAAC,CACnC1D,kBAAkB,CAACyD,WAAW,CAACW,MAAM,CAACC,IAAI,EAAI,CAACX,iBAAiB,CAACY,QAAQ,CAACD,IAAI,CAAC,CAAC,CAAC,CACjFnE,YAAY,CAAC4D,eAAe,CAAC,CAE7B;AACA1D,cAAc,CAACmE,IAAI,OAAAC,iBAAA,CAAAC,kBAAA,QAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,IACdH,IAAI,EACJf,WAAW,CAACmB,IAAI,MACnBxB,OAAO,CAAE,EAAAqB,iBAAA,CAAAhB,WAAW,CAACmB,IAAI,UAAAH,iBAAA,iBAAhBA,iBAAA,CAAkBrB,OAAO,GAAIoB,IAAI,CAACpB,OAAO,CAClDE,gBAAgB,CAAE,EAAAoB,kBAAA,CAAAjB,WAAW,CAACmB,IAAI,UAAAF,kBAAA,iBAAhBA,kBAAA,CAAkBpB,gBAAgB,GAAIkB,IAAI,CAAClB,gBAAgB,IAC7E,CAAC,CAEH;AACA,GAAIG,WAAW,CAACoB,WAAW,CAAE,CAC3BxD,oBAAoB,CAACoC,WAAW,CAACoB,WAAW,CAAC,CAC/C,CAEF,CAAE,MAAOC,GAAG,CAAE,CACZrC,OAAO,CAAC7C,KAAK,CAAC,6BAA6B,CAAEkF,GAAG,CAAC,CACjDjF,QAAQ,8BAAA8B,MAAA,CAAUmD,GAAG,CAACC,OAAO,CAAE,CAAC,CAClC,CAAC,OAAS,CACRpF,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED6C,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,CAACH,YAAY,CAAC,CAAC,CAGlB;AACA,KAAM,CAAA2C,iBAAiB,CAAGA,CAAC5C,KAAK,CAAE6C,KAAK,GAAK,CAC1C,KAAM,CAAAC,cAAc,CAAG,CAAC,GAAG5E,WAAW,CAAC,CACvC4E,cAAc,CAAC9C,KAAK,CAAC,CAAG6C,KAAK,CAC7B1E,cAAc,CAAC2E,cAAc,CAAC,CAChC,CAAC,CAED;AACA,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B5E,cAAc,CAAC,CAAC,GAAGD,WAAW,CAAE,EAAE,CAAC,CAAC,CACtC,CAAC,CAED;AACA,KAAM,CAAA8E,iBAAiB,CAAG,KAAAA,CAAOC,aAAa,CAAEC,cAAc,GAAK,CACjE,GAAI,CAACD,aAAa,EAAIA,aAAa,GAAKvF,aAAa,CAACwF,cAAc,CAAC,CAAE,CACrE,OAAQ;AACV,CAEA;AACA,GAAI,CAACpF,SAAS,CAACmF,aAAa,CAAC,EACzB,CAACnF,SAAS,CAACmF,aAAa,CAAC,CAACnB,OAAO,EACjC,CAAChE,SAAS,CAACmF,aAAa,CAAC,CAACjB,IAAI,CAAE,CAElC3B,OAAO,CAACC,GAAG,aAAAf,MAAA,CAAa0D,aAAa,2CAAyC,CAAC,CAE/E,GAAI,CACF;AACA,KAAM,CAAAE,aAAa,CAAAZ,aAAA,IAAOzE,SAAS,CAAC,CACpCqF,aAAa,CAACF,aAAa,CAAC,CAAG,CAC7BnB,OAAO,CAAE,EAAE,CACXC,kBAAkB,CAAE,EAAE,CACtBC,IAAI,CAAE,EAAE,CACRoB,SAAS,CAAE,IACb,CAAC,CACDrF,YAAY,CAACoF,aAAa,CAAC,CAE3B;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAA7C,KAAK,8BAAAjB,MAAA,CAA8B0D,aAAa,YAAA1D,MAAA,CAAUX,WAAW,CAAE,CAAC,CAE/F,GAAIyE,QAAQ,CAAC5C,EAAE,CAAE,CACf,KAAM,CAAA6C,SAAS,CAAG,KAAM,CAAAD,QAAQ,CAACzC,IAAI,CAAC,CAAC,CAEvC;AACA,KAAM,CAAA2C,gBAAgB,CAAAhB,aAAA,IAAOzE,SAAS,CAAC,CACvCyF,gBAAgB,CAACN,aAAa,CAAC,CAAG,CAChCnB,OAAO,CAAEwB,SAAS,CAACxB,OAAO,EAAI,EAAE,CAChCC,kBAAkB,CAAEuB,SAAS,CAACvB,kBAAkB,EAAI,EAAE,CACtDC,IAAI,CAAEsB,SAAS,CAACtB,IAAI,EAAI,EAAE,CAC1BoB,SAAS,CAAE,KACb,CAAC,CAEDrF,YAAY,CAACwF,gBAAgB,CAAC,CAChC,CAAC,IAAM,CACLlD,OAAO,CAAC7C,KAAK,mCAAA+B,MAAA,CAAmC0D,aAAa,MAAKI,QAAQ,CAACjC,MAAM,CAAC,CAElF;AACA,KAAM,CAAAmC,gBAAgB,CAAAhB,aAAA,IAAOzE,SAAS,CAAC,CACvCyF,gBAAgB,CAACN,aAAa,CAAC,CAAG,CAChCnB,OAAO,CAAE,EAAE,CACXC,kBAAkB,CAAE,EAAE,CACtBC,IAAI,CAAE,EAAE,CACRxE,KAAK,CAAE,IAAI,CACX4F,SAAS,CAAE,KACb,CAAC,CACDrF,YAAY,CAACwF,gBAAgB,CAAC,CAChC,CACF,CAAE,MAAO/F,KAAK,CAAE,CACd6C,OAAO,CAAC7C,KAAK,kCAAA+B,MAAA,CAAkC0D,aAAa,MAAKzF,KAAK,CAAC,CAEvE;AACA,KAAM,CAAA+F,gBAAgB,CAAAhB,aAAA,IAAOzE,SAAS,CAAC,CACvCyF,gBAAgB,CAACN,aAAa,CAAC,CAAG,CAChCnB,OAAO,CAAE,EAAE,CACXC,kBAAkB,CAAE,EAAE,CACtBC,IAAI,CAAE,EAAE,CACRxE,KAAK,CAAE,IAAI,CACX4F,SAAS,CAAE,KACb,CAAC,CACDrF,YAAY,CAACwF,gBAAgB,CAAC,CAChC,CACF,CAEA;AACA,KAAM,CAAAC,oBAAoB,CAAG,CAAC,GAAG9F,aAAa,CAAC,CAE/C;AACA,KAAM,CAAA+F,QAAQ,CAAGD,oBAAoB,CAACN,cAAc,CAAC,CACrDM,oBAAoB,CAACN,cAAc,CAAC,CAAGD,aAAa,CAEpD;AACAtF,gBAAgB,CAAC6F,oBAAoB,CAAC,CAEtC;AACA,KAAM,CAAAE,sBAAsB,CAAG,CAAC,GAAG9F,eAAe,CAAC,CACnD,KAAM,CAAA+F,kBAAkB,CAAGD,sBAAsB,CAACE,OAAO,CAACX,aAAa,CAAC,CAExE,GAAIU,kBAAkB,GAAK,CAAC,CAAC,CAAE,CAC7B;AACAD,sBAAsB,CAACG,MAAM,CAACF,kBAAkB,CAAE,CAAC,CAAC,CACpD;AACAD,sBAAsB,CAACI,IAAI,CAACL,QAAQ,CAAC,CACrC5F,kBAAkB,CAAC6F,sBAAsB,CAAC,CAC5C,CACF,CAAC,CAED;AACA,KAAM,CAAAK,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI7F,WAAW,CAAC8F,IAAI,CAACC,CAAC,EAAI,CAACA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAE,MAAO,MAAK,CAElD3F,aAAa,CAAC,IAAI,CAAC,CAEnB,GAAI,CACF;AACA,KAAM,CAAA4F,eAAe,CAAGrF,QAAQ,CAACmB,YAAY,CAAC,CAE9C;AACA,KAAM,CAAAmE,cAAc,CAAG,CACrBC,OAAO,CAAEnF,MAAM,CACfoF,MAAM,CAAEpG,WAAW,CACnB+C,WAAW,CAAEkD,eAAe,CAAClD,WAAW,CACxCF,KAAK,CAAEnC,WAAW,CAClBsC,gBAAgB,CAAEiD,eAAe,CAACjD,gBACpC,CAAC,CAED;AACA,KAAM,CAAAmC,QAAQ,CAAG,KAAM,CAAA7C,KAAK,CAAC,sBAAsB,CAAE,CACnD+D,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,cAAc,CACrC,CAAC,CAAC,CAEF,KAAM,CAAAQ,YAAY,CAAG,KAAM,CAAAvB,QAAQ,CAACzC,IAAI,CAAC,CAAC,CAE1C,GAAI,CAACyC,QAAQ,CAAC5C,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACkE,YAAY,CAACpH,KAAK,EAAI,2BAA2B,CAAC,CACpE,CAEA6C,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEsE,YAAY,CAAC,CAC3DvG,gBAAgB,CAAC,IAAI,CAAC,CACtB,MAAO,KAAI,CAAE;AACf,CAAE,MAAOqE,GAAG,CAAE,CACZrC,OAAO,CAAC7C,KAAK,CAAC,0BAA0B,CAAEkF,GAAG,CAAC,CAC9CmC,KAAK,oBAAAtF,MAAA,CAAoBmD,GAAG,CAACC,OAAO,CAAE,CAAC,CACvC,MAAO,MAAK,CAAE;AAChB,CAAC,OAAS,CACRpE,aAAa,CAAC,KAAK,CAAC,CACtB,CACF,CAAC,CACD;AACA,KAAM,CAAAuG,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAAhB,iBAAiB,CAAC,CAAC,CACzC,GAAIgB,OAAO,CAAE,CACX,GAAI9E,YAAY,CAAGzB,UAAU,CAAG,CAAC,CAAE,CACjC;AACAuB,QAAQ,cAAAR,MAAA,CAAcU,YAAY,CAAG,CAAC,CAAE,CAAC,CAC3C,CAAC,IAAM,CACL;AACAF,QAAQ,CAAC,WAAW,CAAC,CACvB,CACF,CACF,CAAC,CAED;AACA,KAAM,CAAAiF,mBAAmB,CAAIC,UAAU,EAAK,CAC1C,KAAM,CAAAC,YAAY,CAAGxH,aAAa,CAACuH,UAAU,CAAC,CAE9C;AACA,GAAIrH,eAAe,CAACiD,MAAM,GAAK,CAAC,EAAInC,aAAa,CAACmC,MAAM,EAAI,CAAC,CAAE,CAC7D,mBACE3D,IAAA,QAAKiI,SAAS,CAAC,sBAAsB,CAAAC,QAAA,cACnClI,IAAA,SAAMiI,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAEF,YAAY,CAAO,CAAC,CACvD,CAAC,CAEV,CAEA;AACA,mBACEhI,IAAA,QAAKiI,SAAS,CAAC,sBAAsB,CAAAC,QAAA,cACnChI,KAAA,WACE+H,SAAS,CAAC,sBAAsB,CAChCtC,KAAK,CAAEqC,YAAa,CACpBG,QAAQ,CAAGC,CAAC,EAAKtC,iBAAiB,CAACsC,CAAC,CAACC,MAAM,CAAC1C,KAAK,CAAEoC,UAAU,CAAE,CAAAG,QAAA,eAE/DlI,IAAA,WAAQ2F,KAAK,CAAEqC,YAAa,CAAAE,QAAA,CAAEF,YAAY,CAAS,CAAC,CACnDtH,eAAe,CAAC4H,GAAG,CAAC3D,SAAS,eAC5B3E,IAAA,WAAwB2F,KAAK,CAAEhB,SAAU,CAAAuD,QAAA,CACtCvD,SAAS,EADCA,SAEL,CACT,CAAC,EACI,CAAC,CACN,CAAC,CAEV,CAAC,CAED;AACA,KAAM,CAAA4D,iBAAiB,CAAGA,CAAC5D,SAAS,CAAEoD,UAAU,GAAK,CACnD5E,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEuB,SAAS,CAAE,YAAY,CAAE/D,SAAS,CAAC+D,SAAS,CAAC,CAAC,CAC9E,KAAM,CAAAG,IAAI,CAAGlE,SAAS,CAAC+D,SAAS,CAAC,CAEjC;AACA,GAAI,CAACG,IAAI,CAAE,CACT3B,OAAO,CAAC7C,KAAK,CAAC,oBAAoB,CAAEqE,SAAS,CAAC,CAC9C,mBAAOzE,KAAA,CAACN,KAAK,EAAC4I,OAAO,CAAC,SAAS,CAAAN,QAAA,EAAC,gCAA8B,CAACvD,SAAS,EAAQ,CAAC,CACnF,CAEA,KAAM,CAAA8D,UAAU,CAAG,CACjBC,QAAQ,CAAE,QACZ,CAAC,CAED;AACA,GAAI5D,IAAI,CAACoB,SAAS,CAAE,CAClB,mBACEhG,KAAA,QAAK+H,SAAS,CAAC,qBAAqB,CAAAC,QAAA,EACjCJ,mBAAmB,CAACC,UAAU,CAAC,cAChC7H,KAAA,QAAK+H,SAAS,CAAC,2CAA2C,CAAAC,QAAA,eACxDlI,IAAA,CAACH,OAAO,EAAC8I,SAAS,CAAC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CAAAV,QAAA,cACvChI,KAAA,SAAM+H,SAAS,CAAC,iBAAiB,CAAAC,QAAA,EAAC,gBAAc,CAACvD,SAAS,CAAC,KAAG,EAAM,CAAC,CAC9D,CAAC,cACV3E,IAAA,MAAGiI,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,uBAAqB,CAAG,CAAC,EAC1C,CAAC,EACH,CAAC,CAEV,CAEA;AACA,GAAIpD,IAAI,CAACxE,KAAK,CAAE,CACd,mBACEJ,KAAA,QAAK+H,SAAS,CAAC,qBAAqB,CAAAC,QAAA,EACjCJ,mBAAmB,CAACC,UAAU,CAAC,cAChC/H,IAAA,QAAKiI,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACvChI,KAAA,CAACN,KAAK,EAAC4I,OAAO,CAAC,QAAQ,CAAAN,QAAA,EAAC,iCACS,CAACvD,SAAS,CAAC,2CAC5C,EAAO,CAAC,CACL,CAAC,EACH,CAAC,CAEV,CAEA;AACA,KAAM,CAAAC,OAAO,CAAGE,IAAI,CAACF,OAAO,EAAI,EAAE,CAClC,KAAM,CAAAC,kBAAkB,CAAGC,IAAI,CAACD,kBAAkB,EAAI,EAAE,CACxD,KAAM,CAAAgE,SAAS,CAAG/D,IAAI,CAACA,IAAI,EAAI,EAAE,CAEjC3B,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAE,CAC9BwB,OAAO,CAAEA,OAAO,CAACjB,MAAM,CACvBkB,kBAAkB,CAAEA,kBAAkB,CAAClB,MAAM,CAC7CmF,IAAI,CAAED,SAAS,CAAClF,MAClB,CAAC,CAAC,CAEF,mBACEzD,KAAA,QAAK+H,SAAS,CAAC,qBAAqB,CAAAC,QAAA,EACjCJ,mBAAmB,CAACC,UAAU,CAAC,cAEhC/H,IAAA,QAAKiI,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACvClI,IAAA,QAAKiI,SAAS,CAAC,wBAAwB,CAAAC,QAAA,cACrChI,KAAA,UAAO+H,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC9BlI,IAAA,UAAAkI,QAAA,cACElI,IAAA,OAAAkI,QAAA,CACGtD,OAAO,CAAC0D,GAAG,CAAC,CAACS,GAAG,CAAEC,GAAG,GAAK,CACzB,GAAI,CAAAC,WAAW,CAAGF,GAAG,CACrB,GAAIlE,kBAAkB,EAAIA,kBAAkB,CAACmE,GAAG,CAAC,CAAE,CACjD,KAAM,CAAAE,UAAU,CAAGrE,kBAAkB,CAACmE,GAAG,CAAC,CAC1C,GAAIE,UAAU,CAACC,WAAW,EAAID,UAAU,CAACC,WAAW,CAACnC,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAClEiC,WAAW,CAAGC,UAAU,CAACC,WAAW,CACtC,CAAC,IAAM,IAAID,UAAU,CAAClE,IAAI,EAAIkE,UAAU,CAAClE,IAAI,CAACgC,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAC3DiC,WAAW,CAAGC,UAAU,CAAClE,IAAI,CAC/B,CACF,CACA,mBAAOhF,IAAA,OAAcoJ,KAAK,CAAEL,GAAI,CAAAb,QAAA,CAAEe,WAAW,EAA7BD,GAAkC,CAAC,CACrD,CAAC,CAAC,CACA,CAAC,CACA,CAAC,cACRhJ,IAAA,UAAAkI,QAAA,CACGW,SAAS,EAAIA,SAAS,CAAClF,MAAM,CAAG,CAAC,CAAGkF,SAAS,CAACP,GAAG,CAAC,CAACe,GAAG,CAAEC,MAAM,GAAK,CAClE;AACA,GAAIC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,CAAE,CACtB;AACA,mBACErJ,IAAA,OAAAkI,QAAA,CACGmB,GAAG,CAACf,GAAG,CAAC,CAACmB,IAAI,CAAEC,OAAO,GAAK,CAC1B,KAAM,CAAAC,YAAY,CAAGF,IAAI,GAAK,IAAI,EAAIA,IAAI,GAAKzG,SAAS,CAAG,EAAE,CAAG4G,MAAM,CAACH,IAAI,CAAC,CAC5E,mBAAOzJ,IAAA,OAAAkI,QAAA,CAAmByB,YAAY,EAAtBD,OAA2B,CAAC,CAC9C,CAAC,CAAC,EAJKJ,MAKL,CAAC,CAET,CAAC,IAAM,IAAI,MAAO,CAAAD,GAAG,GAAK,QAAQ,EAAIA,GAAG,GAAK,IAAI,CAAE,CAClD;AACA,mBACErJ,IAAA,OAAAkI,QAAA,CACGtD,OAAO,CAAC0D,GAAG,CAAC,CAACuB,OAAO,CAAEC,MAAM,GAAK,CAChC,KAAM,CAAAL,IAAI,CAAGJ,GAAG,CAACQ,OAAO,CAAC,CACzB,KAAM,CAAAF,YAAY,CAAGF,IAAI,GAAK,IAAI,EAAIA,IAAI,GAAKzG,SAAS,CAAG,EAAE,CAAG4G,MAAM,CAACH,IAAI,CAAC,CAC5E,mBAAOzJ,IAAA,OAAAkI,QAAA,CAAkByB,YAAY,EAArBG,MAA0B,CAAC,CAC7C,CAAC,CAAC,EALKR,MAML,CAAC,CAET,CAAC,IAAM,CACL;AACA,mBAAOtJ,IAAA,OAAAkI,QAAA,cAAiBlI,IAAA,OAAAkI,QAAA,CAAI,oBAAkB,CAAI,CAAC,EAAnCoB,MAAuC,CAAC,CAC1D,CACF,CAAC,CAAC,cACAtJ,IAAA,OAAAkI,QAAA,cAAIlI,IAAA,OAAI+J,OAAO,CAAEnF,OAAO,CAACjB,MAAM,EAAI,CAAE,CAAAuE,QAAA,CAAC,mBAAiB,CAAI,CAAC,CAAI,CACjE,CACI,CAAC,EACH,CAAC,CACL,CAAC,CACH,CAAC,EACH,CAAC,CAEV,CAAC,CAED;AACA,KAAM,CAAA8B,YAAY,CAAGA,CAAA,GAAM,CACzB,MAAO,CAAAxJ,aAAa,CAAC8H,GAAG,CAAC,CAAC3D,SAAS,CAAE7B,KAAK,gBACxC9C,IAAA,QAAqBiI,SAAS,CAAC,0BAA0B,CAAAC,QAAA,CACtDK,iBAAiB,CAAC5D,SAAS,CAAE7B,KAAK,CAAC,EAD5B6B,SAEL,CACN,CAAC,CACJ,CAAC,CAED;AACA,KAAM,CAAAsF,qBAAqB,CAAGA,CAAA,GAAM,CAClC,GAAI,CAACnJ,WAAW,CAAE,CAChB,mBAAOd,IAAA,CAACJ,KAAK,EAAC4I,OAAO,CAAC,MAAM,CAAAN,QAAA,CAAC,+BAA6B,CAAO,CAAC,CACpE,CAEA;AACA,KAAM,CAAAjB,eAAe,CAAGrF,QAAQ,CAACmB,YAAY,CAAC,CAE9C,GAAI,CAACkE,eAAe,CAAE,CACpB,mBAAOjH,IAAA,CAACJ,KAAK,EAAC4I,OAAO,CAAC,SAAS,CAAAN,QAAA,CAAC,qBAAmB,CAAO,CAAC,CAC7D,CAEA;AACA,KAAM,CAAAgC,qBAAqB,CAAIC,IAAI,EAAK,CACtC,GAAI,CAACA,IAAI,CAAE,MAAO,KAAI,CAEtB,MAAO,CAAAA,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC9B,GAAG,CAAC,CAAC+B,IAAI,CAAEC,CAAC,gBAClCtK,IAAA,QAAauK,KAAK,CAAE,CAAEC,WAAW,CAAE,KAAM,CAAE,CAAAtC,QAAA,CACxCmC,IAAI,EADGC,CAEL,CACN,CAAC,CACJ,CAAC,CAED,mBACEpK,KAAA,QAAK+H,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC/BlI,IAAA,QAAKiI,SAAS,CAAC,wDAAwD,CAAAC,QAAA,cACrEhI,KAAA,OAAI+H,SAAS,CAAC,MAAM,CAAAC,QAAA,EAAC,GAAC,cAAAlI,IAAA,WAAAkI,QAAA,CAAQ,kBAAgB,CAAQ,CAAC,IAAC,cAAAlI,IAAA,SAAMuK,KAAK,CAAE,CAAC7B,QAAQ,CAAE,MAAM,CAAE,CAAAR,QAAA,CAAC,+DAA6D,CAAM,CAAC,EAAI,CAAC,CAC/J,CAAC,cACNhI,KAAA,QAAK+H,SAAS,CAAC,0BAA0B,CAAAC,QAAA,eACvClI,IAAA,QAAK,CAAC,CACLkK,qBAAqB,CAACjD,eAAe,CAACjD,gBAAgB,CAAC,EACrD,CAAC,EACH,CAAC,CAEV,CAAC,CAED;AACA,KAAM,CAAAyG,eAAe,CAAGA,CAAA,GAAM,CAC5B;AACA,KAAM,CAAAC,SAAS,CAAG,CAChB,uCAAuC,CAAE;AACzC,uCAAuC,CAAE;AACzC,uCAAuC,CAAE;AACzC,uCAAyC;AAAA,CAC1C,CAED;AACA,KAAM,CAAAC,eAAe,CAAGD,SAAS,CAAC3H,YAAY,CAAG2H,SAAS,CAAC/G,MAAM,CAAC,CAElE,mBACEzD,KAAA,QAAK+H,SAAS,CAAC,yBAAyB,CAAAC,QAAA,eACtClI,IAAA,QAAKiI,SAAS,CAAC,wDAAwD,CAAAC,QAAA,cACrEhI,KAAA,MAAAgI,QAAA,EAAG,qCAAmC,CAACyC,eAAe,CAAC,8FAA4F,EAAG,CAAC,CACpJ,CAAC,CAEL3J,WAAW,CAACsH,GAAG,CAAC,CAACsC,KAAK,CAAE9H,KAAK,gBAC5B9C,IAAA,QAAiBiI,SAAS,CAAC,mBAAmB,CAAAC,QAAA,cAC5ChI,KAAA,QAAKqK,KAAK,CAAE,CAAEM,OAAO,CAAE,MAAM,CAAEC,UAAU,CAAE,QAAQ,CAAEC,KAAK,CAAE,MAAO,CAAE,CAAA7C,QAAA,eACnElI,IAAA,UACEgL,IAAI,CAAC,MAAM,CACXrF,KAAK,CAAEiF,KAAM,CACbzC,QAAQ,CAAGC,CAAC,EAAK1C,iBAAiB,CAAC5C,KAAK,CAAEsF,CAAC,CAACC,MAAM,CAAC1C,KAAK,CAAE,CAC1DsC,SAAS,CAAC,qBAAqB,CAC/BgD,QAAQ,CAAE7J,UAAU,EAAIF,aAAc,CACtCgK,WAAW,CAAC,oBAAoB,CAChCX,KAAK,CAAE,CAAEY,IAAI,CAAE,CAAE,CAAE,CACpB,CAAC,CACD,CAACjK,aAAa,EAAI4B,KAAK,GAAK9B,WAAW,CAAC2C,MAAM,CAAG,CAAC,eACjD3D,IAAA,QAAKuK,KAAK,CAAE,CAAEa,UAAU,CAAE,MAAO,CAAE,CAAAlD,QAAA,cACjChI,KAAA,WACE+H,SAAS,4CAAA5F,MAAA,CAA6C,CAACuI,KAAK,CAAC5D,IAAI,CAAC,CAAC,CAAG,UAAU,CAAG,EAAE,CAAG,CACxFqE,OAAO,CAAExF,aAAc,CACvBoF,QAAQ,CAAE,CAACL,KAAK,CAAC5D,IAAI,CAAC,CAAE,CAAAkB,QAAA,eAE1BlI,IAAA,WAAAkI,QAAA,CAAQ,KAAG,CAAQ,CAAC,YACpB,EAAQ,CAAC,CACN,CACN,EACE,CAAC,EAtBEpF,KAuBL,CACN,CAAC,EACC,CAAC,CAEV,CAAC,CAED;AACA,GAAI1C,OAAO,CAAE,CACX,mBACEJ,IAAA,CAACF,aAAa,EAACsJ,KAAK,CAAC,iBAAiB,CAAAlB,QAAA,cACpClI,IAAA,QAAKiI,SAAS,CAAC,kDAAkD,CAACsC,KAAK,CAAE,CAACe,MAAM,CAAE,MAAM,CAAE,CAAApD,QAAA,cACxFlI,IAAA,CAACH,OAAO,EAAC8I,SAAS,CAAC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CAAAV,QAAA,cACvClI,IAAA,SAAMiI,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,YAAU,CAAM,CAAC,CAC5C,CAAC,CACP,CAAC,CACO,CAAC,CAEpB,CAEA;AACA,GAAI5H,KAAK,CAAE,CACT6C,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAE9C,KAAK,CAAC,CAC5C,mBACEN,IAAA,CAACF,aAAa,EAACsJ,KAAK,CAAC,OAAO,CAAAlB,QAAA,cAC1BhI,KAAA,QAAK+H,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BlI,IAAA,QAAKiI,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3BlI,IAAA,OAAIiI,SAAS,CAAC,yBAAyB,CAAAC,QAAA,CAAC,oBAAkB,CAAI,CAAC,CAC5D,CAAC,cACNhI,KAAA,QAAK+H,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzBlI,IAAA,MAAAkI,QAAA,CAAI5H,KAAK,CAAI,CAAC,cACdN,IAAA,MAAAkI,QAAA,CAAG,+EAA6E,CAAG,CAAC,EACjF,CAAC,cACNlI,IAAA,QAAKiI,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3BlI,IAAA,WACEiI,SAAS,CAAC,uCAAuC,CACjDoD,OAAO,CAAEA,CAAA,GAAME,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE,CAAAvD,QAAA,CACzC,OAED,CAAQ,CAAC,CACN,CAAC,EACH,CAAC,CACO,CAAC,CAEpB,CAEA;AACA;AACA;AACA,mBACElI,IAAA,CAACF,aAAa,EAAAoI,QAAA,cACZhI,KAAA,QAAK+H,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BlI,IAAA,QAAKiI,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3BhI,KAAA,OAAI+H,SAAS,CAAC,aAAa,CAAAC,QAAA,EAAC,OAAK,CAACnF,YAAY,CAAG,CAAC,CAAC,KAAG,CAACzB,UAAU,CAAC,GAAC,EAAI,CAAC,CACrE,CAAC,cACNpB,KAAA,QAAK+H,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzBhI,KAAA,QAAK+H,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACnChI,KAAA,OAAAgI,QAAA,eAAIlI,IAAA,WAAAkI,QAAA,CAAQ,YAAU,CAAQ,CAAC,IAAC,cAAAlI,IAAA,SAAMiI,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAExG,WAAW,CAAO,CAAC,EAAI,CAAC,cACzF1B,IAAA,MAAAkI,QAAA,CAAIpG,iBAAiB,CAAI,CAAC,cAC1B9B,IAAA,QAAK,CAAC,EACH,CAAC,cAENE,KAAA,QAAK+H,SAAS,CAAC,0BAA0B,CAAAC,QAAA,eAEvChI,KAAA,QAAK+H,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5BlI,IAAA,OAAIiI,SAAS,CAAC,eAAe,CAAAC,QAAA,cAAClI,IAAA,WAAAkI,QAAA,CAAQ,eAAa,CAAQ,CAAC,CAAI,CAAC,cACjElI,IAAA,QAAKiI,SAAS,CAAC,2BAA2B,CAAAC,QAAA,CACnC8B,YAAY,CAAC,CAAC,CAChB,CAAC,EACH,CAAC,cAGN9J,KAAA,QAAK+H,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BlI,IAAA,QAAKiI,SAAS,CAAC,4BAA4B,CAAAC,QAAA,CACxC+B,qBAAqB,CAAC,CAAC,CACrB,CAAC,cACNjK,IAAA,QAAKiI,SAAS,CAAC,sBAAsB,CAAAC,QAAA,CAClCuC,eAAe,CAAC,CAAC,CACf,CAAC,cACNzK,IAAA,QAAKuK,KAAK,CAAE,CAAEM,OAAO,CAAE,MAAM,CAAEa,cAAc,CAAE,QAAS,CAAE,CAAAxD,QAAA,cACxDlI,IAAA,WACEiI,SAAS,0CAAA5F,MAAA,CAA2CjB,UAAU,EAAIJ,WAAW,CAAC8F,IAAI,CAACC,CAAC,EAAI,CAACA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAG,UAAU,CAAG,EAAE,CAAG,CACvHqE,OAAO,CAAEzD,eAAgB,CACzBqD,QAAQ,CAAE7J,UAAU,EAAIJ,WAAW,CAAC8F,IAAI,CAACC,CAAC,EAAI,CAACA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAE,CAAAkB,QAAA,CAExD9G,UAAU,CAAG,eAAe,CAAG,MAAM,CAChC,CAAC,CACN,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,EACH,CAAC,CACO,CAAC,CAEpB,CAEA,cAAe,CAAAjB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}